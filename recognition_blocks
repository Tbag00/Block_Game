import re
import numpy as np
import tensorflow as tf
from tensorflow import keras
from keras import datasets, models, layers, callbacks
import matplotlib.pyplot as plt
import cv2 as cv

# controlla se rettangolo 1 contiene rettangolo 2
def inside(x1, y1, w1, h1, x2, y2, w2, h2) -> bool:
    if x2 >= x1 and y2 >= y1 and x2+w2 <= x1+w1 and y2+h2 <= y1+h1:
        return True
    else: 
        return False

# Input: immagine contenente solo numero
# Output: etichetta
def recon_number(rectangle: cv.Mat) -> int:
    # adatto input size
    rectangle = cv.resize(rectangle,(28,28))
    return model.predict(np.array([rectangle])).argmax(axis=1)


# importo modello e immagine
model: models.Sequential = models.load_model("recognition_numbers.keras")
img = cv.imread('/home/tommaso/intelligenzaArtificiale/progetto/test_personali_blocks/prova.jpeg', cv.IMREAD_GRAYSCALE)
#img = cv.resize(img, (1024, 512))

assert img is not None, "file could not be read, check with os.path.exists()"

# miglioro contrasto
img = cv.normalize(
    img, None, alpha=0, beta=255, norm_type=cv.NORM_MINMAX)
(thresh, img) = cv.threshold(img, 128, 255, cv.THRESH_BINARY | cv.ADAPTIVE_THRESH_GAUSSIAN_C)
#(thresh, img) = cv.threshold(img, 128, 255, cv.THRESH_BINARY | cv.THRESH_OTSU)
kernel = cv.getStructuringElement(cv.MORPH_RECT, (3,3))
img = cv.morphologyEx(img, cv.MORPH_CLOSE, kernel, iterations=2)

# decommenta se usi caussiana pochÃ© inverte i colori quindi li inverto
img = cv.bitwise_not(img)

# lista contenente i rettangoli
# i rettangoli sono dizionari codificati dall' angolo in alto a sinistra (x,y) dalla base w e altezza h
rects = []
contours, hierarchy = cv.findContours(img, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)

for contour in contours:
    # approssimo rettangolo
    epsilon = 0.1*cv.arcLength(contour,True)
    approx = cv.approxPolyDP(contour,epsilon,True)
    x,y,w,h = cv.boundingRect(approx)
    ratio = w/float(h)

    # salvo rettangoli superiori a una certa grandezza
    #if w > img.shape[1]/16.0 and h > img.shape[0]/16.0 and x != 0:
    if w*h > 3000:
        rects.append({
            "x":x, "y":y, "w":w, "h":h
        })

for rect in rects:
    rectangle = cv.rectangle(img,(rect["x"],rect["y"]),(rect["x"]+rect["w"],rect["y"]+rect["h"]),(0,255,0),2)
    print(rect["w"]*rect["h"])
    cv.imshow("test", img)
    cv.waitKey(0)

cv.destroyAllWindows()
"""
img1 = img.copy()

for contour in contours:
    approx = cv.approxPolyDP(contour, 0.02*cv.arcLength(contour, True), True)
    x, y, w, h = cv.boundingRect(approx)

cv.circle(img, (x, y), 1, (255, 0, 0), 3)
"""

